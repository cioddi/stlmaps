import * as WasmModule from '@threegis/core-wasm';

// Use the generated TypeScript types for better autocompletion and type checking
type WasmApi = typeof WasmModule;

let wasmApi: WasmApi | null = null;

// Async function to initialize the WASM module (call this once)
export async function initializeWasm(): Promise<void> {
  if (!wasmApi) {
    // The WASM module exports a default function that initializes the module
    // This is automatically generated by wasm-pack
    if (typeof WasmModule.default === 'function') {
      await WasmModule.default(); // Loads the .wasm file
    }
    
    // Call any one-time Rust setup function
    if (typeof WasmModule.initialize === 'function') {
      WasmModule.initialize();
    }
    
    wasmApi = WasmModule;
    console.log('WASM Module Initialized');
  }
}

// Helper to ensure WASM is loaded before calling functions
function getWasmApi(): WasmApi {
  if (!wasmApi) {
    throw new Error(
      'WASM module not initialized. Call initializeWasm() first.'
    );
  }
  return wasmApi;
}

// --- Define Wrappers for Rust Functions ---

// Example: Wrapper for hello_from_rust
export interface HelloResponse {
  message: string;
  value: number;
}

export function callHelloFromRust(name: string): HelloResponse {
  const api = getWasmApi();
  // serde-wasm-bindgen returns JsValue, we need to cast/parse it
  if (typeof api.hello_from_rust !== 'function') {
    throw new Error('hello_from_rust function not found in WASM module');
  }
  const result = api.hello_from_rust(name) as any;
  return result as HelloResponse;
}

// Example: Wrapper for transform_coordinate
export interface TransformedCoords {
  lon: number;
  lat: number;
  original_epsg: number;
  target_epsg: number;
}

export function callTransformCoordinate(lon: number, lat: number, fromEpsg: number, toEpsg: number): TransformedCoords {
  const api = getWasmApi();
  if (typeof api.transform_coordinate !== 'function') {
    throw new Error('transform_coordinate function not found in WASM module');
  }
  const result = api.transform_coordinate(lon, lat, fromEpsg, toEpsg) as any;
  return result as TransformedCoords;
}

// Add wrappers for other Rust functions as they are created...
